syntax = "proto3";

option csharp_namespace = "Pipelines.Proto";

package pipelines.runner;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";

// ============= Common Types =============

enum RunnerStatus {
  RUNNER_STATUS_UNSPECIFIED = 0;
  RUNNER_STATUS_IDLE = 1;
  RUNNER_STATUS_BUSY = 2;
  RUNNER_STATUS_OFFLINE = 3;
  RUNNER_STATUS_MAINTENANCE = 4;
}

enum BuildStatus {
  BUILD_STATUS_UNSPECIFIED = 0;
  BUILD_STATUS_PENDING = 1;
  BUILD_STATUS_RUNNING = 2;
  BUILD_STATUS_SUCCESS = 3;
  BUILD_STATUS_FAILED = 4;
  BUILD_STATUS_CANCELLED = 5;
  BUILD_STATUS_TIMEOUT = 6;
}

enum JobPriority {
  JOB_PRIORITY_UNSPECIFIED = 0;
  JOB_PRIORITY_LOW = 1;
  JOB_PRIORITY_NORMAL = 2;
  JOB_PRIORITY_HIGH = 3;
  JOB_PRIORITY_CRITICAL = 4;
}

// ============= Runner Management =============

message RunnerInfo {
  string id = 1;
  string name = 2;
  repeated string capabilities = 3;
  int32 max_concurrent_jobs = 4;
  int32 current_job_count = 5;
  RunnerStatus status = 6;
  google.protobuf.Timestamp registered_at = 7;
  google.protobuf.Timestamp last_heartbeat = 8;
  string version = 9;
  string platform = 10;
  map<string, string> labels = 11;
}

message RegisterRunnerRequest {
  string name = 1;
  repeated string capabilities = 2;
  int32 max_concurrent_jobs = 3;
  string version = 4;
  string platform = 5;
  map<string, string> labels = 6;
}

message RegisterRunnerResponse {
  string runner_id = 1;
  google.protobuf.Timestamp expires_at = 2;
}

message HeartbeatRequest {
  string runner_id = 1;
  RunnerStatus status = 2;
  repeated string additional_capabilities = 3;
}

message HeartbeatResponse {
  bool success = 1;
  google.protobuf.Timestamp next_heartbeat_deadline = 2;
}

message UnregisterRunnerRequest {
  string runner_id = 1;
  string reason = 2;
}

message ListRunnersRequest {
  repeated string capabilities_filter = 1;
  RunnerStatus status_filter = 2;
  int32 page_size = 3;
  string page_token = 4;
}

message ListRunnersResponse {
  repeated RunnerInfo runners = 1;
  string next_page_token = 2;
  int32 total_count = 3;
}

// ============= Job Management =============

message Step {
  string id = 1;
  string name = 2;
  string image = 3;
  string script = 4;
  map<string, string> environment = 5;
  google.protobuf.Duration timeout = 6;
  bool allow_failure = 7;
}

message Build {
  string id = 1;
  string name = 2;
  string repository_url = 3;
  string branch = 4;
  string commit_sha = 5;
  google.protobuf.Duration timeout = 6;
  repeated Step steps = 7;
  map<string, string> environment = 8;
  repeated string required_capabilities = 9;
  JobPriority priority = 10;
  google.protobuf.Timestamp created_at = 11;
}

message JobRequest {
  string runner_id = 1;
  repeated string available_capabilities = 2;
}

message JobAssignment {
  bool has_job = 1;
  Build build = 2;
  google.protobuf.Timestamp assigned_at = 3;
  google.protobuf.Timestamp deadline = 4;
}

message ScheduleJobRequest {
  Build build = 1;
  JobPriority priority = 2;
  bool force_schedule = 3;
}

message ScheduleJobResponse {
  string job_id = 1;
  int32 queue_position = 2;
  google.protobuf.Timestamp estimated_start_time = 3;
}

message ReportResultRequest {
  string runner_id = 1;
  string build_id = 2;
  BuildStatus status = 3;
  string message = 4;
  map<string, string> outputs = 5;
  google.protobuf.Timestamp completed_at = 6;
}

message ReportResultResponse {
  bool success = 1;
  string message = 2;
}

message CancelJobRequest {
  string job_id = 1;
  string reason = 2;
}

message CancelJobResponse {
  bool success = 1;
  string message = 2;
}

// ============= Statistics and Monitoring =============

message QueueStatistics {
  int32 pending_jobs = 1;
  int32 running_jobs = 2;
  int32 completed_jobs = 3;
  int32 failed_jobs = 4;
  int32 cancelled_jobs = 5;
  int32 active_runners = 6;
  int32 idle_runners = 7;
  google.protobuf.Duration average_wait_time = 8;
  google.protobuf.Duration average_execution_time = 9;
  google.protobuf.Timestamp last_updated = 10;
}

message HealthCheckRequest {
  string service = 1;
}

message HealthCheckResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SERVING = 1;
    STATUS_NOT_SERVING = 2;
    STATUS_SERVICE_UNKNOWN = 3;
  }
  Status status = 1;
  map<string, string> details = 2;
}

// ============= Services =============

service RunnerService {
  // Runner lifecycle management
  rpc RegisterRunner(RegisterRunnerRequest) returns (RegisterRunnerResponse);
  rpc UnregisterRunner(UnregisterRunnerRequest) returns (google.protobuf.Empty);
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
  
  // Runner queries
  rpc ListRunners(ListRunnersRequest) returns (ListRunnersResponse);
  
  // Job execution
  rpc RequestJob(JobRequest) returns (JobAssignment);
  rpc ReportResult(ReportResultRequest) returns (ReportResultResponse);
}

service SchedulerService {
  // Job management
  rpc ScheduleJob(ScheduleJobRequest) returns (ScheduleJobResponse);
  rpc CancelJob(CancelJobRequest) returns (CancelJobResponse);
  
  // Monitoring
  rpc GetStatistics(google.protobuf.Empty) returns (QueueStatistics);
}

service HealthService {
  rpc Check(HealthCheckRequest) returns (HealthCheckResponse);
}


