// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pipelines.Storage.PostgreSQL;

#nullable disable

namespace Pipelines.Storage.PostgreSQL.Migrations
{
    [DbContext(typeof(PostgreSQLContext))]
    [Migration("20250902030529_AddRepositoryAccessTable")]
    partial class AddRepositoryAccessTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Pipelines.Core.Entities.Builds.Build", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("CancelInProgress")
                        .HasColumnType("boolean");

                    b.Property<bool>("CancellationRequested")
                        .HasColumnType("boolean");

                    b.Property<string>("CommitRef")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyGroup")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FinishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RepositoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("TimeoutSeconds")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RepositoryId");

                    b.ToTable("Builds");
                });

            modelBuilder.Entity("Pipelines.Core.Entities.Builds.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("LineNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Metadata")
                        .HasColumnType("text");

                    b.Property<string>("Section")
                        .HasColumnType("text");

                    b.Property<int>("Source")
                        .HasColumnType("integer");

                    b.Property<Guid?>("StepId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BuildId");

                    b.HasIndex("StepId");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("Pipelines.Core.Entities.Builds.Step", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BuildId")
                        .HasColumnType("uuid");

                    b.Property<int?>("ExitCode")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("FinishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Script")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("TimeoutSeconds")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BuildId");

                    b.ToTable("Step");
                });

            modelBuilder.Entity("Pipelines.Core.Entities.Repositories.Repository", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AccessId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AccessId1")
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Branch")
                        .HasColumnType("text");

                    b.Property<string>("CloneUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("HtmlUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<string>("RawId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SshUrl")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WebhooksId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AccessId1");

                    b.HasIndex("WebhooksId");

                    b.ToTable("Repositories");
                });

            modelBuilder.Entity("Pipelines.Core.Entities.Repositories.RepositoryAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<List<string>>("AdminUsers")
                        .HasColumnType("text[]");

                    b.PrimitiveCollection<List<string>>("ReadUsers")
                        .HasColumnType("text[]");

                    b.Property<Guid>("RepositoryId")
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<List<string>>("WriteUsers")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.ToTable("RepositoryAccess");
                });

            modelBuilder.Entity("Pipelines.Core.Entities.Repositories.RepositoryEnvironment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsSecret")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RepositoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RepositoryId");

                    b.ToTable("RepositoryEnvironment");
                });

            modelBuilder.Entity("Pipelines.Core.Entities.Repositories.RepositoryWebhooks", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.PrimitiveCollection<List<string>>("Events")
                        .HasColumnType("text[]");

                    b.Property<string>("Secret")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RepositoryWebhooks");
                });

            modelBuilder.Entity("Pipelines.Core.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("EmailVerificationToken")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("EmailVerificationTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("LastLoginIp")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("LastLoginTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("PasswordResetTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Pipelines.Core.Entities.Users.UserLoginMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessToken")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<int>("LoginMethod")
                        .HasColumnType("integer");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("TokenExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLoginMethod");
                });

            modelBuilder.Entity("Pipelines.Core.Entities.Users.UserProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserProvider");
                });

            modelBuilder.Entity("Pipelines.Core.Entities.Users.UserSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BuildTimeoutMinutes")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EmailNotifications")
                        .HasColumnType("integer");

                    b.Property<bool>("EnableBrowserNotifications")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableTwoFactorAuthentication")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaxConcurrentBuilds")
                        .HasColumnType("integer");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserSetting");
                });

            modelBuilder.Entity("Pipelines.Core.Entities.Builds.Build", b =>
                {
                    b.HasOne("Pipelines.Core.Entities.Repositories.Repository", "Repository")
                        .WithMany()
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Repository");
                });

            modelBuilder.Entity("Pipelines.Core.Entities.Builds.Log", b =>
                {
                    b.HasOne("Pipelines.Core.Entities.Builds.Build", "Build")
                        .WithMany()
                        .HasForeignKey("BuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pipelines.Core.Entities.Builds.Step", "Step")
                        .WithMany("Logs")
                        .HasForeignKey("StepId");

                    b.Navigation("Build");

                    b.Navigation("Step");
                });

            modelBuilder.Entity("Pipelines.Core.Entities.Builds.Step", b =>
                {
                    b.HasOne("Pipelines.Core.Entities.Builds.Build", null)
                        .WithMany("Steps")
                        .HasForeignKey("BuildId");
                });

            modelBuilder.Entity("Pipelines.Core.Entities.Repositories.Repository", b =>
                {
                    b.HasOne("Pipelines.Core.Entities.Repositories.RepositoryAccess", "Access")
                        .WithMany()
                        .HasForeignKey("AccessId1");

                    b.HasOne("Pipelines.Core.Entities.Repositories.RepositoryWebhooks", "Webhooks")
                        .WithMany()
                        .HasForeignKey("WebhooksId");

                    b.Navigation("Access");

                    b.Navigation("Webhooks");
                });

            modelBuilder.Entity("Pipelines.Core.Entities.Repositories.RepositoryEnvironment", b =>
                {
                    b.HasOne("Pipelines.Core.Entities.Repositories.Repository", "Repository")
                        .WithMany("Environments")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Repository");
                });

            modelBuilder.Entity("Pipelines.Core.Entities.Users.UserLoginMethod", b =>
                {
                    b.HasOne("Pipelines.Core.Entities.Users.User", "User")
                        .WithMany("LoginMethods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pipelines.Core.Entities.Users.UserProvider", b =>
                {
                    b.HasOne("Pipelines.Core.Entities.Users.User", "User")
                        .WithMany("Providers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pipelines.Core.Entities.Users.UserSetting", b =>
                {
                    b.HasOne("Pipelines.Core.Entities.Users.User", "User")
                        .WithOne("Setting")
                        .HasForeignKey("Pipelines.Core.Entities.Users.UserSetting", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pipelines.Core.Entities.Builds.Build", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("Pipelines.Core.Entities.Builds.Step", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("Pipelines.Core.Entities.Repositories.Repository", b =>
                {
                    b.Navigation("Environments");
                });

            modelBuilder.Entity("Pipelines.Core.Entities.Users.User", b =>
                {
                    b.Navigation("LoginMethods");

                    b.Navigation("Providers");

                    b.Navigation("Setting");
                });
#pragma warning restore 612, 618
        }
    }
}
